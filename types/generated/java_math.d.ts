//@ts-nocheck

declare module 'java.math' {
import { BigInteger as java_math_BigInteger } from 'java.math';
import { Object as java_lang_Object, Class as java_lang_Class, Number as java_lang_Number, Comparable as java_lang_Comparable } from 'java.lang';
import { Random as java_util_Random } from 'java.util';

  export class BigInteger extends java_lang_Number implements java_lang_Comparable<java_math_BigInteger> {
class: java_lang_Class<java_lang_Object>;
lowestSetBit: number;
static ONE: java_math_BigInteger;
static TEN: java_math_BigInteger;
static TWO: java_math_BigInteger;
static ZERO: java_math_BigInteger;
abs(): java_math_BigInteger;
add(arg0: java_math_BigInteger): java_math_BigInteger;
and(arg0: java_math_BigInteger): java_math_BigInteger;
andNot(arg0: java_math_BigInteger): java_math_BigInteger;
bitCount(): number;
bitLength(): number;
byteValueExact(): number;
clearBit(arg0: number): java_math_BigInteger;
compareTo(arg0: java_lang_Object): number;
compareTo(arg0: java_math_BigInteger): number;
divide(arg0: java_math_BigInteger): java_math_BigInteger;
divideAndRemainder(arg0: java_math_BigInteger): JArray<java_math_BigInteger>;
doubleValue(): number;
equals(arg0: java_lang_Object): boolean;
flipBit(arg0: number): java_math_BigInteger;
floatValue(): number;
gcd(arg0: java_math_BigInteger): java_math_BigInteger;
getClass(): java_lang_Class<java_lang_Object>;
getLowestSetBit(): number;
hashCode(): number;
intValue(): number;
intValueExact(): number;
isProbablePrime(arg0: number): boolean;
longValue(): number;
longValueExact(): number;
max(arg0: java_math_BigInteger): java_math_BigInteger;
min(arg0: java_math_BigInteger): java_math_BigInteger;
mod(arg0: java_math_BigInteger): java_math_BigInteger;
modInverse(arg0: java_math_BigInteger): java_math_BigInteger;
modPow(arg0: java_math_BigInteger, arg1: java_math_BigInteger): java_math_BigInteger;
multiply(arg0: java_math_BigInteger): java_math_BigInteger;
negate(): java_math_BigInteger;
nextProbablePrime(): java_math_BigInteger;
not(): java_math_BigInteger;
notify(): void;
notifyAll(): void;
or(arg0: java_math_BigInteger): java_math_BigInteger;
pow(arg0: number): java_math_BigInteger;
remainder(arg0: java_math_BigInteger): java_math_BigInteger;
setBit(arg0: number): java_math_BigInteger;
shiftLeft(arg0: number): java_math_BigInteger;
shiftRight(arg0: number): java_math_BigInteger;
shortValueExact(): number;
signum(): number;
sqrt(): java_math_BigInteger;
sqrtAndRemainder(): JArray<java_math_BigInteger>;
static probablePrime(arg0: number, arg1: java_util_Random): java_math_BigInteger;
static valueOf(arg0: number): java_math_BigInteger;
subtract(arg0: java_math_BigInteger): java_math_BigInteger;
testBit(arg0: number): boolean;
toByteArray(): JArray<number>;
toString(): string;
toString(arg0: number): string;
wait(): void;
wait(arg0: number): void;
wait(arg0: number, arg1: number): void;
xor(arg0: java_math_BigInteger): java_math_BigInteger;
constructor(arg0: JArray<number>);
constructor(arg0: JArray<number>, arg1: number, arg2: number);
constructor(arg0: number, arg1: JArray<number>);
constructor(arg0: number, arg1: JArray<number>, arg2: number, arg3: number);
constructor(arg0: number, arg1: java_util_Random);
constructor(arg0: number, arg1: number, arg2: java_util_Random);
constructor(arg0: string);
constructor(arg0: string, arg1: number);
  }
}