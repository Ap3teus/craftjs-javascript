//@ts-nocheck

declare module 'java.math' {
import { BigInteger as java_math_BigInteger } from 'java.math';
import { Object as java_lang_Object, Class as java_lang_Class, Number as java_lang_Number, Comparable as java_lang_Comparable } from 'java.lang';
import { Random as java_util_Random } from 'java.util';

  export class BigInteger extends java_lang_Number implements java_lang_Comparable<java_math_BigInteger> {
static ZERO: java_math_BigInteger;
static ONE: java_math_BigInteger;
static TWO: java_math_BigInteger;
static TEN: java_math_BigInteger;
lowestSetBit: number;
class: java_lang_Class<java_lang_Object>;
add(arg0: java_math_BigInteger): java_math_BigInteger;
bitCount(): number;
equals(arg0: java_lang_Object): boolean;
toString(arg0: number): string;
toString(): string;
hashCode(): number;
abs(): java_math_BigInteger;
sqrt(): java_math_BigInteger;
pow(arg0: number): java_math_BigInteger;
min(arg0: java_math_BigInteger): java_math_BigInteger;
max(arg0: java_math_BigInteger): java_math_BigInteger;
compareTo(arg0: java_lang_Object): number;
compareTo(arg0: java_math_BigInteger): number;
intValue(): number;
longValue(): number;
floatValue(): number;
doubleValue(): number;
static valueOf(arg0: number): java_math_BigInteger;
toByteArray(): number[];
mod(arg0: java_math_BigInteger): java_math_BigInteger;
signum(): number;
shiftLeft(arg0: number): java_math_BigInteger;
divide(arg0: java_math_BigInteger): java_math_BigInteger;
remainder(arg0: java_math_BigInteger): java_math_BigInteger;
multiply(arg0: java_math_BigInteger): java_math_BigInteger;
setBit(arg0: number): java_math_BigInteger;
or(arg0: java_math_BigInteger): java_math_BigInteger;
and(arg0: java_math_BigInteger): java_math_BigInteger;
negate(): java_math_BigInteger;
not(): java_math_BigInteger;
longValueExact(): number;
divideAndRemainder(arg0: java_math_BigInteger): java_math_BigInteger[];
bitLength(): number;
static probablePrime(arg0: number, arg1: java_util_Random): java_math_BigInteger;
nextProbablePrime(): java_math_BigInteger;
subtract(arg0: java_math_BigInteger): java_math_BigInteger;
sqrtAndRemainder(): java_math_BigInteger[];
gcd(arg0: java_math_BigInteger): java_math_BigInteger;
modPow(arg0: java_math_BigInteger, arg1: java_math_BigInteger): java_math_BigInteger;
modInverse(arg0: java_math_BigInteger): java_math_BigInteger;
shiftRight(arg0: number): java_math_BigInteger;
xor(arg0: java_math_BigInteger): java_math_BigInteger;
andNot(arg0: java_math_BigInteger): java_math_BigInteger;
testBit(arg0: number): boolean;
clearBit(arg0: number): java_math_BigInteger;
flipBit(arg0: number): java_math_BigInteger;
getLowestSetBit(): number;
isProbablePrime(arg0: number): boolean;
intValueExact(): number;
shortValueExact(): number;
byteValueExact(): number;
wait(arg0: number): void;
wait(arg0: number, arg1: number): void;
wait(): void;
getClass(): java_lang_Class<java_lang_Object>;
notify(): void;
notifyAll(): void;
constructor(arg0: number, arg1: java_util_Random);
constructor(arg0: string);
constructor(arg0: number, arg1: number, arg2: java_util_Random);
constructor(arg0: number, arg1: number[], arg2: number, arg3: number);
constructor(arg0: number[]);
constructor(arg0: number[], arg1: number, arg2: number);
constructor(arg0: string, arg1: number);
constructor(arg0: number, arg1: number[]);
  }
}