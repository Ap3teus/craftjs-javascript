//@ts-nocheck

declare module 'sun.misc' {
import { Class as java_lang_Class, Object as java_lang_Object, Throwable as java_lang_Throwable } from 'java.lang';
import { Field as java_lang_reflect_Field } from 'java.lang.reflect';
import { ByteBuffer as java_nio_ByteBuffer } from 'java.nio';

  export class Unsafe extends java_lang_Object {
static INVALID_FIELD_OFFSET: number;
static ARRAY_BOOLEAN_BASE_OFFSET: number;
static ARRAY_BYTE_BASE_OFFSET: number;
static ARRAY_SHORT_BASE_OFFSET: number;
static ARRAY_CHAR_BASE_OFFSET: number;
static ARRAY_INT_BASE_OFFSET: number;
static ARRAY_LONG_BASE_OFFSET: number;
static ARRAY_FLOAT_BASE_OFFSET: number;
static ARRAY_DOUBLE_BASE_OFFSET: number;
static ARRAY_OBJECT_BASE_OFFSET: number;
static ARRAY_BOOLEAN_INDEX_SCALE: number;
static ARRAY_BYTE_INDEX_SCALE: number;
static ARRAY_SHORT_INDEX_SCALE: number;
static ARRAY_CHAR_INDEX_SCALE: number;
static ARRAY_INT_INDEX_SCALE: number;
static ARRAY_LONG_INDEX_SCALE: number;
static ARRAY_FLOAT_INDEX_SCALE: number;
static ARRAY_DOUBLE_INDEX_SCALE: number;
static ARRAY_OBJECT_INDEX_SCALE: number;
static ADDRESS_SIZE: number;
object: java_lang_Object;
boolean: boolean;
byte: number;
byte: number;
short: number;
short: number;
char: string;
char: string;
int: number;
int: number;
long: number;
long: number;
float: number;
float: number;
double: number;
double: number;
objectVolatile: java_lang_Object;
booleanVolatile: boolean;
byteVolatile: number;
shortVolatile: number;
charVolatile: string;
intVolatile: number;
longVolatile: number;
floatVolatile: number;
doubleVolatile: number;
andAddInt: number;
andAddLong: number;
andSetInt: number;
andSetLong: number;
andSetObject: java_lang_Object;
address: number;
loadAverage: number;
allocateInstance(arg0: java_lang_Class<java_lang_Object>): java_lang_Object;
loadFence(): void;
storeFence(): void;
fullFence(): void;
getObject(arg0: java_lang_Object, arg1: number): java_lang_Object;
putObject(arg0: java_lang_Object, arg1: number, arg2: java_lang_Object): void;
getBoolean(arg0: java_lang_Object, arg1: number): boolean;
putBoolean(arg0: java_lang_Object, arg1: number, arg2: boolean): void;
getByte(arg0: number): number;
getByte(arg0: java_lang_Object, arg1: number): number;
putByte(arg0: number, arg1: number): void;
putByte(arg0: java_lang_Object, arg1: number, arg2: number): void;
getShort(arg0: java_lang_Object, arg1: number): number;
getShort(arg0: number): number;
putShort(arg0: number, arg1: number): void;
putShort(arg0: java_lang_Object, arg1: number, arg2: number): void;
getChar(arg0: number): string;
getChar(arg0: java_lang_Object, arg1: number): string;
putChar(arg0: java_lang_Object, arg1: number, arg2: string): void;
putChar(arg0: number, arg1: string): void;
getInt(arg0: number): number;
getInt(arg0: java_lang_Object, arg1: number): number;
putInt(arg0: number, arg1: number): void;
putInt(arg0: java_lang_Object, arg1: number, arg2: number): void;
getLong(arg0: java_lang_Object, arg1: number): number;
getLong(arg0: number): number;
putLong(arg0: java_lang_Object, arg1: number, arg2: number): void;
putLong(arg0: number, arg1: number): void;
getFloat(arg0: number): number;
getFloat(arg0: java_lang_Object, arg1: number): number;
putFloat(arg0: java_lang_Object, arg1: number, arg2: number): void;
putFloat(arg0: number, arg1: number): void;
getDouble(arg0: number): number;
getDouble(arg0: java_lang_Object, arg1: number): number;
putDouble(arg0: java_lang_Object, arg1: number, arg2: number): void;
putDouble(arg0: number, arg1: number): void;
getObjectVolatile(arg0: java_lang_Object, arg1: number): java_lang_Object;
putObjectVolatile(arg0: java_lang_Object, arg1: number, arg2: java_lang_Object): void;
getBooleanVolatile(arg0: java_lang_Object, arg1: number): boolean;
putBooleanVolatile(arg0: java_lang_Object, arg1: number, arg2: boolean): void;
getByteVolatile(arg0: java_lang_Object, arg1: number): number;
putByteVolatile(arg0: java_lang_Object, arg1: number, arg2: number): void;
getShortVolatile(arg0: java_lang_Object, arg1: number): number;
putShortVolatile(arg0: java_lang_Object, arg1: number, arg2: number): void;
getCharVolatile(arg0: java_lang_Object, arg1: number): string;
putCharVolatile(arg0: java_lang_Object, arg1: number, arg2: string): void;
getIntVolatile(arg0: java_lang_Object, arg1: number): number;
putIntVolatile(arg0: java_lang_Object, arg1: number, arg2: number): void;
getLongVolatile(arg0: java_lang_Object, arg1: number): number;
putLongVolatile(arg0: java_lang_Object, arg1: number, arg2: number): void;
getFloatVolatile(arg0: java_lang_Object, arg1: number): number;
putFloatVolatile(arg0: java_lang_Object, arg1: number, arg2: number): void;
getDoubleVolatile(arg0: java_lang_Object, arg1: number): number;
putDoubleVolatile(arg0: java_lang_Object, arg1: number, arg2: number): void;
getAndAddInt(arg0: java_lang_Object, arg1: number, arg2: number): number;
getAndAddLong(arg0: java_lang_Object, arg1: number, arg2: number): number;
getAndSetInt(arg0: java_lang_Object, arg1: number, arg2: number): number;
getAndSetLong(arg0: java_lang_Object, arg1: number, arg2: number): number;
getAndSetObject(arg0: java_lang_Object, arg1: number, arg2: java_lang_Object): java_lang_Object;
park(arg0: boolean, arg1: number): void;
unpark(arg0: java_lang_Object): void;
throwException(arg0: java_lang_Throwable): void;
objectFieldOffset(arg0: java_lang_reflect_Field): number;
staticFieldBase(arg0: java_lang_reflect_Field): java_lang_Object;
staticFieldOffset(arg0: java_lang_reflect_Field): number;
shouldBeInitialized(arg0: java_lang_Class<java_lang_Object>): boolean;
ensureClassInitialized(arg0: java_lang_Class<java_lang_Object>): void;
getAddress(arg0: number): number;
putAddress(arg0: number, arg1: number): void;
allocateMemory(arg0: number): number;
reallocateMemory(arg0: number, arg1: number): number;
setMemory(arg0: java_lang_Object, arg1: number, arg2: number, arg3: number): void;
setMemory(arg0: number, arg1: number, arg2: number): void;
copyMemory(arg0: java_lang_Object, arg1: number, arg2: java_lang_Object, arg3: number, arg4: number): void;
copyMemory(arg0: number, arg1: number, arg2: number): void;
freeMemory(arg0: number): void;
arrayBaseOffset(arg0: java_lang_Class<java_lang_Object>): number;
arrayIndexScale(arg0: java_lang_Class<java_lang_Object>): number;
addressSize(): number;
pageSize(): number;
defineAnonymousClass(arg0: java_lang_Class<java_lang_Object>, arg1: number[], arg2: java_lang_Object[]): java_lang_Class<java_lang_Object>;
getLoadAverage(arg0: number[], arg1: number): number;
compareAndSwapInt(arg0: java_lang_Object, arg1: number, arg2: number, arg3: number): boolean;
compareAndSwapLong(arg0: java_lang_Object, arg1: number, arg2: number, arg3: number): boolean;
compareAndSwapObject(arg0: java_lang_Object, arg1: number, arg2: java_lang_Object, arg3: java_lang_Object): boolean;
putOrderedObject(arg0: java_lang_Object, arg1: number, arg2: java_lang_Object): void;
putOrderedInt(arg0: java_lang_Object, arg1: number, arg2: number): void;
putOrderedLong(arg0: java_lang_Object, arg1: number, arg2: number): void;
invokeCleaner(arg0: java_nio_ByteBuffer): void;

  }
}